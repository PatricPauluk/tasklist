Usuários do banco:

{
	"name": "Almiru-chan",
	"email": "mir@aomir.com",
	"password": "123456"
}

{
	"name": "Bruna",
	"email": "brubes@brubes.com",
	"password": "654321"
}

{
	"name": "Patric Pauluk",
	"email": "patric@pauluk.com",
	"password": "123456"
}

----------------------------------------------------

Comandos já usados no inicio:
yarn init -y
yarn add express
yarn add nodemon sucrase -D

Para padrão de código:
yarn add eslint -D
yarn add prettier eslint-config-prettier eslint-plugin-prettier -D

Depois de configurar tudo, para corrigir o código já existente:
yarn eslint --fix src --ext .js

----------------------------------------------------

Instalado PostgreSQL 11
Instalado Postbird 0.8.4

Criando banco de dados:
Object > Create > Database

Nome do banco: tasklist

----------------------------------------------------

Instalado o Sequelize (ARM) para facilitar trabalhar com banco de dados relacionais
yarn add sequelize

Interface de linha de comando para trabalhar com sequelize
yarn add sequelize-cli -D

A conexão com o sequelize esta em database > index.js.
As configurações do sequelize estão em ".sequelizerc".

----------------------------------------------------

Exemplificando um pouco a estrutura

A pasta src > app tem os models e os controllers
O arquivo src > config > database.js configura o app com o banco de dados
A pasta src > database > migrations serve para automatizar/controlar melhor o banco de dados ao invés de alterar no model

----------------------------------------------------

Instaladas bibliotecas do PostgreSQL
yarn add pg pg-hstore

----------------------------------------------------

Comando exemplo com sequelize (também utilizado neste projeto) para criar migrations automáticamente:
yarn sequelize migration:create --name=create-users

Após criadas, precisamos inserir o código para trabalhar com o banco.
Quando a migration for executada, ela ira realizar todo o procedimento conforme a função chamada.

Para executar a última migration criada:
yarn sequelize db:migrate

Após executar, as tabelas e colunas serão criadas no banco, pode conferir no próprio PostgreSQL ou no Postbird.

----------------------------------------------------

Caso seja necessário desfazer a criação das tabelas e colunas criadas, para por exemplo, acrescentar outro
campo, é utilizado o comando:
yarn sequelize db:migrate:undo

Ele desfaz a última migration executada.

Para desfazer TODAS as migrations executadas:
yarn sequelize db:migrate:undo:all

----------------------------------------------------

Instalado bcrypt.js para criar hash de senha:
yarn add bcrypt js

----------------------------------------------------

Instalada a biblioteca JWT:
yarn add jsonwebtoken

JWT (JSON Web Token) utilizado para autenticar usuários em APIs REST.
Por exemplo, ao realizar um login em uma aplicação, o JWT devolve um token criptografado dividido em 3 partes:

• Header do token (Qual tipo);
• Payload (Pode conter dados);
• Assinatura (Garante autenticidade).

O token é armazenado pra ser utilizado em futuras autenticações, realizar o login novamente, etc.

----------------------------------------------------

Instalado yup para trabalhar com validações no node:
yarn add yup
